<TeXmacs|1.0.7.19>

<style|generic>

<\body>
  <\render-exercise|Exercise 1.37>
    <render-footnote|*|Creative Commons <image|<tuple||png>|1.20cm|0.42cm||>
    2013, Lawrence R. Amlord(<with|font|heiti|\<#989C\>\<#4E16\>\<#654F\>>).>

    a. An infinite <em|continued fraction> is an expression of the form

    <\equation*>
      f=<frac|N<rsub|1>|D<rsub|1>+<frac|N<rsub|2>|D<rsub|2>+<frac|N<rsub|3>|D<rsub|3>+\<cdots\>>>>
    </equation*>

    As an example, one can show that the infinite continued fraction
    expansion with the <math|N<rsub|i>> and the <math|D<rsub|i>> all equal to
    <math|1> produces <math|<frac*|1|\<phi\>>>, where <math|\<phi\>> is the
    golden ratio (described in section 1.2.2). One way to approximate an
    infinite continued fraction is to truncate the expansion after a given
    number of terms. Such a truncation<emdash>a so-called <em|k-term finite
    continued fraction><emdash>has the form

    <\equation*>
      <frac|N<rsub|1>|D<rsub|1>+<frac|N<rsub|2>|\<ddots\>+<frac|N<rsub|k>|D<rsub|k>>>>
    </equation*>

    Suppose that <scm|n> and <scm|d> are procedures of one argument (the term
    index <math|i>) that return the <math|N<rsub|i>> and <math|D<rsub|i>> of
    the terms of the continued fraction. Define a procedure <scm|cont-frac>
    such that evaluating <scm|(cont-frac n d k)> computes the value of the
    <math|k>-term finite continued fraction. Check your procedure by
    approximating <math|<frac*|1|\<phi\>>> using

    <\scm-code>
      (cont-frac (lambda (i) 1.0)

      \ \ \ \ \ \ \ \ \ \ \ (lambda (i) 1.0)

      \ \ \ \ \ \ \ \ \ \ \ k)
    </scm-code>

    for successive values of <scm|k>. How large must you make <scm|k> in
    order to get an approximation that is accurate to <math|4> decimal
    places?

    b. If your <scm|cont-frac> procedure generates a recursive process, write
    one that generates an iterative process. If it generates an iterative
    process, write one that generates a recursive process.

    <\answer>
      \;

      a. Before setting out to design such a procedure, we are supposed to
      find out the patterns submerged in the expression

      <\equation>
        <frac|N<rsub|1>|D<rsub|1>+<frac|N<rsub|2>|\<ddots\>+<frac|N<rsub|k>|D<rsub|k>>>><label|Exercise-1.37-Formula-1>
      </equation>

      \;

      An intuitive strategy to evaluate it would be proceeding the
      computation by two steps:

      <\enumerate-roman>
        <item>Evaluate <math|N<rsub|i>> and <math|D<rsub|i>>.

        <item>Combine <math|N<rsub|i>> and <math|D<rsub|i>> with the rest
        part of the expression.
      </enumerate-roman>

      where <math|i> varies from <math|0> to <math|k>, and the simplest case
      lies where <math|i=0>.

      Thinking hastily, one might express this idea quite straightforward in
      Lisp

      <\scm-code>
        (define (cont-frac n d k)

        \ \ (if (= k 0)

        \ \ \ \ \ \ 0

        \ \ \ \ \ \ (/ (n k)

        \ \ \ \ \ \ \ \ \ (+ (d k)

        \ \ \ \ \ \ \ \ \ \ \ \ (cont-frac n d (- k 1))))))
      </scm-code>

      and delighted with the output in testing with

      <\scm-code>
        (cont-frac (lambda (i) 1.0)

        \ \ \ \ \ \ \ \ \ \ \ (lambda (i) 1.0)

        \ \ \ \ \ \ \ \ \ \ \ k)
      </scm-code>

      However, this delusion ruins when it comes to evaluate with other kinds
      of <scm|n> and <scm|d> whose return value are not constant to <scm|i>.
      <scm|(lambda (i) i)> for example, falsifies this naive practice.

      The reason that the procedure above fails to express our intension lies
      in the practice which the guy took to deal with the index. Instead of
      increasing, the index value in the <scm|cont-frac> procedure above
      decreases as the evalutor descends into each layer of denominators.
      Thus, this acts in direct contravention to our original purpose.

      To fix the procedure, we'd better change the way in controlling the
      index. We hope the index starts from <math|1> and increases one by one
      through out the computation to reflect on the pattern emerged in
      formula (<reference|Exercise-1.37-Formula-1>), and keeps the value of
      <scm|k> constant in the mean time. So we can keep track of the index by
      using a local variable <math|i> starting from <math|1>, and increase by
      <math|1> on each step, as is shown in Figure
      <reference|Exercise_1.37-Figure_1><\float|float|tbh>
        <big-figure|<label|Exercise_1.37-Figure_1><with|gr-mode|<tuple|group-edit|group-ungroup>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|1par|0.6par>|gr-grid|<tuple|empty>|gr-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-edit-grid-aspect|<tuple|<tuple|axes|none>|<tuple|1|none>|<tuple|10|none>>|gr-edit-grid|<tuple|empty>|gr-edit-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-arrow-end|\<gtr\>|gr-auto-crop|true|gr-color|dark
        orange|gr-arrow-begin|\<less\>|gr-dash-style|10|<graphics|||<gr-group|<line|<point|-5.0|0.0>|<point|-1.0|0.0>>|<text-at|<math|0>|<point|-4.07495546103982|-0.400094899193015>>|<with|color|dark
        cyan|<point|-4|0>>|<text-at|<math|1>|<point|-3.04982471226353|-0.400095912157693>>|<with|color|dark
        cyan|<point|-3|0>>|<with|arrow-end|\<gtr\>|color|brown|dash-style|10|arrow-begin|\<less\>|<line|<point|-3.0|0.2>|<point|-3.0|1.0>|<point|3.0|1.0>|<point|3.0|0.2>>>|<with|arrow-end|\<gtr\>|color|dark
        orange|dash-style|10|arrow-begin|\<less\>|<line|<point|-2.02505291705252|-0.499900780526525>|<point|-2.0|-1.0>|<point|3.0|-1.0>|<point|3.0|-0.39998677073687>>>|<with|arrow-end|\<gtr\>|color|red|<spline|<point|-2.8|0.3>|<point|-2.3|0.3>>>|<text-at|<math|2>|<point|-2.1|-0.4>>|<with|color|red|<text-at|<math|i>|<point|-2.5|0.4>>>|<with|color|dark
        cyan|<point|-2|0>>|<with|dash-style|10|<line|<point|-1|0>|<point|1.0|0.0>>>|<with|arrow-end|\<gtr\>|<line|<point|1|0>|<point|5.0|0.0>>>|<with|color|dark
        cyan|<point|1|0>>|<text-at|<math|k-2>|<point|0.7|-0.4>>|<with|color|dark
        cyan|<point|2|0>>|<text-at|<math|k-1>|<point|1.7|-0.4>>|<with|color|dark
        cyan|<point|3|0>>|<text-at|<math|k>|<point|3.0|-0.4>>|<with|color|dark
        cyan|<point|4|0>>|<text-at|<math|k+1>|<point|3.80058870220928|-0.39236671517397>>>>>|Increasing
        Process of Index in the Computation>
      </float>. Finally, we hve to identify the non-decomposable problem.
      That is, when <math|i=k>, the fraction
      <math|<frac|N<rsub|i>|D<rsub|i>>> is the result we seek. Therefore,
      after amelioration, our procedure turns out to be:

      <\scm-code>
        (define (cont-frac n d k)

        \ \ (define (cfr i)

        \ \ \ \ (if (= i k)

        \ \ \ \ \ \ \ \ (/ (n i) (d i))

        \ \ \ \ \ \ \ \ (/ (n i)

        \ \ \ \ \ \ \ \ \ \ \ (+ (d i) (cfr (+ i 1))))))

        \ \ (cfr 1))
      </scm-code>

      As the test shows, in order to get an approximation that is accurate to
      4 decimal places, the value of <scm|k> should be at least raised up to
      11.<\footnote>
        For the sake of aesthetics, the tedious output generated by the
        interpreter is not presented here. It is located in file
        <em|Test_for_Exercise_1.37.scm>.
      </footnote>

      b. We can also formulate an iterative process for computing the
      <math|k>-term finite continued fraction. Suppose we are about to
      compute a <math|5>-term fraction

      <\equation*>
        <frac|1|1+<frac|2|\<ddots\>+<frac|5|5>>>
      </equation*>

      \;

      As is shown in Figure <reference|Exercise_1.37-Figure_2><\float|float|tbh>
        <big-figure|<label|Exercise_1.37-Figure_2><with|gr-mode|<tuple|group-edit|group-ungroup>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|1par|0.6par>|gr-grid|<tuple|empty>|gr-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-edit-grid-aspect|<tuple|<tuple|axes|none>|<tuple|1|none>|<tuple|10|none>>|gr-edit-grid|<tuple|empty>|gr-edit-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-auto-crop|true|gr-arrow-end|\<gtr\>|<graphics||<gr-group|<gr-group|<with|color|red|<cline|<point|-2.9289626736531|0.49513288895724>|<point|-1.67992580501968|0.49513259301863>|<point|-1.67992580501968|0.0758807078486301>|<point|-2.92896668344275|0.0758807078486301>>>|<with|color|red|<text-at|<scm|(-
        k 1)>|<point|-2.8290526736531|0.19928988895724>>>>|<with|arrow-end|\<gtr\>|color|red|<spline|<point|-0.3749124044376|0.75374813660905>|<point|-1.5314174044376|0.98968213660905>|<point|-2.38575991006004|0.49974629853523>>>|<with|arrow-end|\<gtr\>|color|red|<spline|<point|-1.64079867006218|0.146316444536817>|<point|-0.38495867006218|0.143733549246737>>>|<cline|<point|-0.490243|1.68761>|<point|1.0|1.68760748776293>|<point|1.0|-1.08764386823654>|<point|-0.490243418441593|-1.08764386823654>>|<with|color|red|<carc|<point|-0.30702775081907|0.022726444536817>|<point|-0.10702775081907|0.022726444536817>|<point|-0.30702775081907|0.322726444536817>>>|<with|color|magenta|<carc|<point|0.29100446560529|-0.91363267390702>|<point|0.59100446560529|-0.91363267390702>|<point|0.29100446560529|-0.613632673907022>>>|<with|color|blue|<cspline|<point|-0.52787566166435|0.68283723667151>|<point|0.17212433833565|0.48283723667151>|<point|0.87212433833565|0.68283723667151>|<point|0.17212433833565|0.88283723667151>>>|<with|color|red|<carc|<point|-0.33952830089929|0.51144480254408>|<point|-0.13952830089929|0.51144480254408>|<point|-0.33952830089929|0.81144480254408>>>|<with|arrow-end|\<gtr\>|color|magenta|<spline|<point|2.06053646560529|-1.25071839262614>|<point|1.51217646560529|-1.32509839262614>|<point|1.31217646560529|-0.9091790049846>|<point|0.66352254312877|-0.84854395420836>>>|<with|color|blue|<carc|<point|0.255003|0.0790615>|<point|0.655003|0.0790615>|<point|0.255003|0.2790615>>>|<with|arrow-end|\<gtr\>|color|blue|<spline|<point|2.057372|0.2201547>|<point|0.70269171953962|0.2201546678132>>>|<text-at|<math|<tabular*|<tformat|<table|<row|<cell|k>|<cell|result>>|<row|<cell|5>|<cell|1>>|<row|<cell|4>|<cell|<frac|4|5>>>|<row|<cell|3>|<cell|<frac|15|19>>>|<row|<cell|2>|<cell|<frac|38|53>>>|<row|<cell|1>|<cell|<frac|53|91>>>>>>>|<point|-0.39032673289011|0.237855536446627>>|<with|arrow-end|\<gtr\>|color|blue|<spline|<point|0.57251299999997|0.842899>|<point|1.99999999999997|1.4>|<point|3.40886691361291|0.545095250694536>>>|<gr-group|<with|color|magenta|<cline|<point|2.0722722679601|-1.06216582350324>|<point|3.16497776207308|-1.06216348060074>|<point|3.16497776207308|-1.38346920887168>|<point|2.0722737006893|-1.38346920887168>>>|<with|color|magenta|<text-at|answer|<point|2.17220424705786|-1.28356181371358>>>>|<gr-group|<with|color|blue|<cline|<point|2.0627698132028|0.55121758089694>|<point|4.96056974573356|0.55121697764254>|<point|4.96056974573356|0.13196509247255>|<point|2.06276580341315|0.13196509247255>>>|<with|color|blue|<text-at|<scm|(/
        k (+ k result))>|<point|2.1626798132028|0.25537758089694>>>>>>>|Iterative
        Process Generated in the Computation>
      </float>, the value of <math|k> starts from <math|5> and decreases by
      <math|1> on each step. Every successive result can be obtained through
      deviding <math|k> by the sum of <math|k> and the current result

      <\equation*>
        Result<rsub|k-1>=<frac|k|k+Result<rsub|k>>
      </equation*>

      And finally, when <math|k> becomes <math|0>, the fraction is therefore
      the result we seek.

      So in order to obtain the value of the <math|<around*|(|k-1|)>>-term
      fraction, just divide <math|N<rsub|k-1>> by the sum of
      <math|D<rsub|k-1>> and <math|<frac|N<rsub|k>|D<rsub|k>>>

      <\equation*>
        <frac|N<rsub|k-1>|D<rsub|k-1>+<frac|N<rsub|k>|D<rsub|k>>>
      </equation*>

      Note that the value of the denominator accumulates with <math|k>
      counting down on each level of the fraction. Hence, during this
      process, what the evaluator has to keep track of are the current index
      <math|k> and the result accumulated. Therefore, we can express this
      idea in Lisp:

      <\scm-code>
        (define (cont-frac n d k)

        \ \ (define (iter k result)

        \ \ \ \ (if (= k 1)

        \ \ \ \ \ \ \ \ result

        \ \ \ \ \ \ \ \ (iter (- k 1)

        \ \ \ \ \ \ \ \ \ \ \ \ \ \ (/ (n k)

        \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (+ (d k) result)))))

        \ \ (iter k (/ (n k) (d k))))
      </scm-code>
    </answer>
  </render-exercise>
</body>

<\references>
  <\collection>
    <associate|Exercise-1.37-Formula-1|<tuple|1|1>>
    <associate|Exercise_1.37-Figure_1|<tuple|1|2>>
    <associate|Exercise_1.37-Figure_2|<tuple|2|2>>
    <associate|auto-1|<tuple|1|2>>
    <associate|auto-2|<tuple|2|2>>
    <associate|footnote-|<tuple|?|?>>
    <associate|footnote-*|<tuple|?|1>>
    <associate|footnote-1|<tuple|1|?>>
    <associate|footnr-1|<tuple|1|?>>
  </collection>
</references>

<\auxiliary>
  <\collection>
    <\associate|figure>
      <tuple|normal|Increasing Process of Index in the
      Computation|<pageref|auto-1>>

      <tuple|normal|Iterative Process Generated in the
      Computation|<pageref|auto-2>>
    </associate>
  </collection>
</auxiliary>